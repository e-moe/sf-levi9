---
layout: post
title:  "Assignment 3. Students database"
date:   2015-06-03 18:00:00
category: assignments
tags:
    - training
    - assignment
    - jam storage
    - sonata
excerpt: |
    Students database.
---
* TOC
{:toc}

## Student’s database

Idea of student’s database is to create a site of some university. On the site everybody could read
detail page of student. These pages would include student’s name and some description text.

In this home task we will focus only on displaying these detail pages. There is no need to create any overview.
From another point of view, application should be lightweight as much as possible, but made on Symfony 2. ☺

## 1. Implement data model and fill it with fixtures.

There is only one entity in the system – Student. Fields are: name (string, generated by faker lib as
"firstName lastName"), description (text, ~500 symbols, generated by faker), path (string, indexed, empty for now).
With help of Alice bundle, it should be generated 25000 of such entities.

Tip: to improve speed of fixture execution, run command with –no-debug option.

## 2. Create console command to generate routes.

The console command should fill in "path" property of Student entity in a way, that:

* Path contains student’s name in lower case, all non-letters are replaced with underscore.
* Path must be unique in the system, add extra number for duplicates. So, if "alex_sidorov" path already exists and
  there is another Alex Sidorov – next one will obtain path "alex_sidorov_1", next – "alex_sidorov_2", etc.

The logic of path generation should be implemented in PHP (not in SQL).

Tip: Just foreach all students (with pagination, of course) and generate "path" for them one by one.
After path for one student is generated – add this path to some array, so that you could check for duplicates.

It would be nice if logic of path generation is stored in some service class and covered by unit test.

At the end of command execution – echo command time and peak memory usage.

IMAGE

## 3. Implement student’s detail page with full-page caching.

Detail page should be available by link /students/detail/{path}. Display name and description in some simple way.

Turn on build-in full page cache. And cache every viewed page for 15 minutes. Use expiration caching model.

Tip: to test full page cache, display also current time in a template.

IMAGE
 
## 5. Write functional and unit tests

([PHPUnit][phpunit]).

## 6. Static Analysis Tools.

Update your "composer.json" "require-dev" section to install these tools:

* [PHP_CodeSniffer][phpcs] (Use [PSR2][psr2] coding style guide rules set)
* [PHP Mess Detector][phpmd]
* [PHP Copy/Paste Detector][phpcpd]

Check your "src/" folder and fix **all** errors/warnings.
  
## 7. Integrate Travis CI
 
Integrate continuous integration (CI) into your repository based on [Travis CI][travis-ci]
([Getting started][travis-ci-gs], [PHP][travis-ci-php]).
 
* Register in Travis CI (preferable using [GitHub][github] account)
* Add your repository
* Create ".travis.yml"
* Test your integration

## 8. Share your code.

Commit your latest code into [GitHub][github] and send the link as a result of fulfilled home task.

[jam-jars]:             {{ site.baseurl }}/assets/jam_jars.jpg
[sonata]:               https://sonata-project.org/bundles/admin
[alice]:                https://github.com/hautelook/AliceBundle
[github]:               https://github.com/
[phpunit]:              https://phpunit.de/
[phpcs]:                https://github.com/squizlabs/PHP_CodeSniffer
[psr2]:                 https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md
[phpmd]:                http://phpmd.org/
[phpcpd]:               https://github.com/sebastianbergmann/phpcpd
[travis-ci]:            https://travis-ci.org/
[travis-ci-gs]:         http://docs.travis-ci.com/user/getting-started/
[travis-ci-php]:        http://docs.travis-ci.com/user/languages/php
[sqlite]:               https://www.sqlite.org/